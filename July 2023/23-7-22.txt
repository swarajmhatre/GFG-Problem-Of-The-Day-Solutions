-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
Problem Statement: 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an unsorted linked list of N nodes. The task is to remove duplicate elements from this unsorted Linked List. When a value appears in multiple nodes, the node which appeared first should be kept, all others duplicates are to be removed.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution: 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution
{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) 
    {
     // your code goes here
     unordered_set<int> seen;
     Node * curr = head;
     
     if(curr==NULL) return head;
     else seen.insert(curr->data);
     
     while(curr!= NULL && curr->next != NULL){
         if(seen.find(curr->next->data) != seen.end()){
             curr->next = curr->next->next;
         }
         else{
             seen.insert(curr->next->data);
             curr = curr->next;
         }
     }
     return head;
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

